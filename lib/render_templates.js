// Generated by CoffeeScript 1.9.2
var _, async, frontMatter, vinylfs;

_ = require("lodash");
async = require("async");
frontMatter = require("front-matter");
vinylfs = require("vinyl-fs");

module.exports = function renderTemplates(partialsDirectory, layoutsDirectory, locals) {
  var commonLocals, templatize;
  commonLocals = _.extend({}, locals);
  templatize = function(str) {
    if (!_.isString(str)) {
      str = str.toString();
    }
    return _.template("<%\n  var __partial = obj.partial, __contents = obj.contents;\n  partial = function (name, locals) { return __partial(name, _.extend({}, obj, locals)) };\n  contents = function (locals) { return __contents(_.extend({}, obj, locals)) };\n%>" + str);
  };
  return function(files, m, done) {
    return async.waterfall([
      function(callback) {
        var loadIntoCache;
        loadIntoCache = function(directory) {
          return function(callback) {
            var cache;
            cache = {};
            vinylfs.src(directory).on("data", function(vinylFile) {
              var attributes, body, file, ref;
              ref = frontMatter(vinylFile.contents.toString()), attributes = ref.attributes, body = ref.body;
              file = attributes;
              file.contents = new Buffer(body);
              file.renderer = templatize(body);
              return cache[vinylFile.relative] = file;
            }).on("end", function() {
              return callback(null, cache);
            });
          };
        };
        return async.parallel({
          partials: loadIntoCache(partialsDirectory),
          layouts: loadIntoCache(layoutsDirectory)
        }, callback);
      }, function(cache, callback) {
        var posts;
        commonLocals.partial = function(name, locals) {
          return cache.partials[name].renderer(locals);
        };
        _.each(files, function(file, filename) {
          file.renderer = templatize(file.contents);
          file.url = "/" + filename.replace(/index\.html$/, "");
        });
        posts = _.filter(files, {
          isPost: true
        });
        posts = _.sortBy(posts, function(file) {
          return -file.date.valueOf();
        });
        _.each(files, function(file, filename) {
          var current, renderChain;
          renderChain = [file.renderer];
          current = file;
          while (current.layout) {
            if (!cache.layouts[current.layout]) {
              throw new Error("Layout \"" + current.layout + "\" not found.");
            }
            current = cache.layouts[current.layout];
            (function(current) {
              var nextLayoutRenderer;
              nextLayoutRenderer = renderChain[0];
              return renderChain.unshift(function(locals) {
                locals = _.extend({}, locals, {
                  contents: nextLayoutRenderer
                });
                return current.renderer(locals);
              });
            })(current);
          }
          locals = _.extend({}, {
            file: file,
            site: {
              posts: posts
            },
            url: file.url
          }, commonLocals);
          file.contents = new Buffer(renderChain[0](locals));
        });
        return callback();
      }
    ], done);
  };
};
